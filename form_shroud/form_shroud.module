<?php

/**
 * @file
 * Holds the functions which hide the desired (or undesired) form elements.
 */

/**
 * Implements hook_menu().
 */
function form_shroud_menu() {
  $items['admin/structure/formshroud'] = array(
    'title' => 'Form Shroud',
    'description' => 'Manage Form Shroud configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_settings_define'),
    'file' => 'form_shroud.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('form_shroud bypass'),
  );
  $items['admin/structure/formshroud/view'] = array(
    'title' => 'View',
    'description' => 'View Form Shroud registry.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_settings_define'),
    'file' => 'form_shroud.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('form_shroud bypass'),
  );
  $items['admin/structure/formshroud/add'] = array(
    'title' => 'Add',
    'description' => 'List of shroudable forms.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_add'),
    'access arguments' => array('form_shroud bypass'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'form_shroud.admin.inc',
  );
  $items['admin/structure/formshroud/%/remove'] = array(
    'title' => 'Remove',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_settings_remove', 3),
    'access arguments' => array('form_shroud bypass'),
    'type' => MENU_CALLBACK,
    'file' => 'form_shroud.admin.inc',
  );
  $items['admin/structure/formshroud/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_settings_edit', 3),
    'access arguments' => array('form_shroud bypass'),
    'type' => MENU_CALLBACK,
    'file' => 'form_shroud.admin.inc',
  );
  $items['formshroud/input'] = array(
    'page callback' => 'form_shroud_json_callback',
    'access arguments' => array('form_shroud bypass'),
    'type' => MENU_CALLBACK,
    'file' => 'form_shroud.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function form_shroud_permission() {
  return array(
    'form_shroud bypass' => array(
      'title' => t('Bypass Form Shroud'),
      'description' => t('Bypass node edit form restrictions and access Shroud configuration options.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function form_shroud_form_alter(&$form, $form_state, $form_id) {
  if (user_access('form_shroud bypass')) {
    return;
  }
  $shroud_elements = module_invoke_all('shroud_define', $form);
  if (!isset($shroud_elements[$form_id])) {
    return;
  }
  $shroud_registry = db_select('form_shroud_registry', 'f')
    ->fields('f')
    ->condition($shroud_elements[$form_id]['config']['column'], $shroud_elements[$form_id]['config']['id'], $shroud_elements[$form_id]['config']['op'])
    ->condition('form_id', $form_id)
    ->execute()
    ->fetchAllAssoc($shroud_elements[$form_id]['config']['column'], PDO::FETCH_ASSOC);
  if (!empty($shroud_registry)) {
    foreach ($shroud_registry as $id => $entry) {
      if (strstr($form_id, 'menu_overview_form')  && !empty($entry['settings'])) {
        foreach ($form as $mlid => $array_elements) {
          if ($mlid == 'mlid:' . $id) {
            foreach (unserialize($entry['settings']) as $settings => $value) {
              if (is_array($value)) {
                foreach ($value as $ops => $vals) {
                  $form[$mlid][$settings][$ops]['#access'] = FALSE;
                }
              }
              else {
                $form[$mlid][$settings]['#access'] = FALSE;
              }
            }
          }
        }
      }
      elseif (!empty($entry['settings'])) {
        foreach (unserialize($entry['settings']) as $identifier => $setting) {
          if (is_array($setting)) {
            foreach ($setting as $actions => $data) {
              if (is_array($data)) {
                foreach ($data as $level => $deeper) {
                  if (is_array($deeper)) {
                    foreach ($deeper as $rabbit => $hole) {
                      $form[$identifier][$actions][$level][$rabbit]['#access'] = FALSE;
                    }
                  }
                  else {
                  $form[$identifier][$actions][$level]['#access'] = FALSE;
                  }
                }
              }
              else {
                $form[$identifier][$actions]['#access'] = FALSE;
              }
            }
          }
          else {
            $form[$identifier]['#access'] = FALSE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_hook_info().
 */
function form_shroud_hook_info() {
  $hooks['shroud_define'] = array();
}

/**
 * Implements hook_shroud_define().
 */
function form_shroud_shroud_define($form = array()) {
  $shroud = array(
    'node_form' => array(
      'config' => array(
        'table' => 'node',
        'column' => 'id',
        'id' => (isset($form['nid']['#value']))
          ? $form['nid']['#value']
          : '',
        'op' => '=',
      ),
      'options' => array(
        'default' => array(
          'revision_information' => 'Revision information',
          'menu' => 'Menu settings',
          'path' => 'URL path settings',
          'comment_settings' => 'Comment settings',
          'author' => 'Authoring information',
          'options' => 'Publishing options',
        ),
        'actions' => array(
          'actions' => array(
            'delete' => 'Delete',
          ),
        ),
      ),
    ),
    'menu_overview_form' => array(
      'config' => array(
        'table' => 'menu_links',
        'column' => 'id',
        'op' => 'IN',
      ),
      'options' => array(
        'default' => array(
          'hidden' => 'Enabled',
        ),
        'actions' => array(
          'operations' => array(
            'edit' => 'Edit',
            'delete' => 'Delete',
          ),
        ),
      ),
    ),
    'menu_edit_menu' => array(
      'config' => array(
        'table' => 'menu_custom',
        'column' => 'title',
        'id' => (isset($form['title']['#default_value']))
          ? $form['title']['#default_value']
          : '',
        'op' => '=',
      ),
      'options' => array(
        'actions' => array(
          'actions' => array(
            'delete' => 'Delete',
          ),
        ),
      ),
    ),
    'panopoly_page_node_form' => array(
      'config' => array(
        'table' => 'node',
        'column' => 'id',
        'id' => (isset($form['nid']['#value']))
          ? $form['nid']['#value']
          : '',
        'op' => '=',
      ),
      'options' => array(
        'default' => array(
          'revision_information' => 'Revision information',
          'menu' => 'Menu settings',
          'path' => 'URL path settings',
          'comment_settings' => 'Comment settings',
          'author' => 'Authoring information',
          'options' => 'Publishing options',
        ),
        'actions' => array(
          'actions' => array(
            'delete' => 'Delete',
          ),
        ),
      ),
    ),
  );
  foreach ($form as $mlid => $elements) {
    if (strstr($mlid, 'mlid:')) {
      $shroud['menu_overview_form']['config']['id'][] = $elements['#item']['mlid'];
    }
  }
  return $shroud;
}