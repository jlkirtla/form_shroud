<?php

/**
 * @file
 * Holds the functions which hide the desired (or undesired) form elements.
 */

/**
 * Implements hook_menu().
 */
function form_shroud_menu() {
  $items['admin/structure/formshroud'] = array(
    'title' => 'Form Shroud',
    'description' => 'Manage Form Shroud configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_settings_define'),
    'file' => 'form_shroud.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('form_shroud bypass'),
  );
  $items['admin/structure/formshroud/view'] = array(
    'title' => 'View',
    'description' => 'View Form Shroud registry.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_settings_define'),
    'file' => 'form_shroud.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('form_shroud bypass'),
  );
  $items['admin/structure/formshroud/add'] = array(
    'title' => 'Add',
    'description' => 'List of shroudable forms.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_add'),
    'access arguments' => array('form_shroud bypass'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'form_shroud.admin.inc',
  );
  $items['admin/structure/formshroud/%/remove'] = array(
    'title' => 'Remove',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_settings_remove', 3),
    'access arguments' => array('form_shroud bypass'),
    'type' => MENU_CALLBACK,
    'file' => 'form_shroud.admin.inc',
  );
  $items['admin/structure/formshroud/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_shroud_settings_edit', 3),
    'access arguments' => array('form_shroud bypass'),
    'type' => MENU_CALLBACK,
    'file' => 'form_shroud.admin.inc',
  );
  $items['formshroud/input'] = array(
    'page callback' => 'form_shroud_json_callback',
    'access arguments' => array('form_shroud bypass'),
    'type' => MENU_CALLBACK,
    'file' => 'form_shroud.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function form_shroud_permission() {
  return array(
    'form_shroud bypass' => array(
      'title' => t('Bypass Form Shroud'),
      'description' => t('Bypass node edit form restrictions and access Shroud configuration options.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function form_shroud_form_alter(&$form, $form_state, $form_id) {
  //if (user_access)
  switch (TRUE) {
    case strstr($form_id, 'node_form'):
      $condition['column'] = 'id';
      $condition['data'] = $form['nid']['#value'];
      $condition['op'] = '=';
      $base_form_id = 'node_form';
      break;
    case strstr($form_id, 'menu_overview_form'):
      $condition['column'] = 'id';
      $condition['op'] = 'IN';
      foreach ($form as $mlid => $elements) {
        if (strstr($mlid, 'mlid:')) {
          $condition['data'][] = $elements['#item']['mlid'];
        }
      }
      $base_form_id = 'menu_overview_form';
      break;
    case strstr($form_id, 'menu_edit_menu');
      $condition['column'] = 'title';
      $condition['data'] = $form['title']['#default_value'];
      $condition['op'] = '=';
      $base_form_id = 'menu_edit_menu';
      break;
    default:
      return;
  }
  $shroud_registry = db_select('form_shroud_registry', 'f')
    ->fields('f')
    ->condition(db_or()
      ->condition($condition['column'], $condition['data'], $condition['op'])
      ->condition('id', 0))
    ->condition('form_id', $base_form_id)
    ->execute()
    ->fetchAllAssoc($condition['column'], PDO::FETCH_ASSOC);
  if (!empty($shroud_registry)) {
    foreach ($shroud_registry as $id => $entry) {
      // In the menu overview form, the list is stored in $form as a
      // "mlid:$mlid" key => "link data" array. This code cycles through the
      // $form variable and hides the the options for links to be shrouded.
      if (strstr($form_id, 'menu_overview_form')  && !empty($entry['settings'])) {
        foreach ($form as $mlid => $array_elements) {
          if ($mlid == 'mlid:' . $id) {
            foreach (unserialize($entry['settings']) as $settings => $value) {
              if (is_array($value)) {
                foreach ($value as $ops => $vals) {
                  // Previously, settings were unset(), however that led to some
                  // nasty errors. Plus, this allows the data to remain intact
                  // and can still be seen from firebug/inspect if necessary.
                  $form[$mlid][$settings][$ops]['#type'] = 'hidden';
                }
              }
              else {
                $form[$mlid][$settings]['#type'] = 'hidden';
              }
            }
          }
        }
      }
      // The node form is simple, it stores most elements one level deep in the
      // $form variable. However, this code does allot for elements that are
      // two levels deep (such as the save/delete buttons.)
      elseif (strstr($form_id, 'node_form') && !empty($entry['settings'])) {
        foreach (unserialize($entry['settings']) as $identifier => $setting) {
          if (is_array($setting)) {
            foreach ($setting as $actions => $data) {
              $form[$identifier][$actions]['#type'] = 'hidden';
            }
          }
          else {
            $form[$identifier]['#type'] = 'hidden';
          }
        }
      }
      // There are few shroudable elements on the edit menu page currently,
      // because the page doesn't currently have many form elements. However,
      // with the installation of other modules, this form can change. This
      // code allots for one and two level deep form elements as well.
      elseif (strstr($form_id, 'menu_edit_menu') && !empty($entry['settings'])) {
        foreach (unserialize($entry['settings']) as $identifier => $setting) {
          if (is_Array($setting)) {
            foreach ($setting as $actions => $data) {
              $form[$identifier][$actions]['#type'] = 'hidden';
            }
          }
          else {
            $form[$identifier]['#type'] = 'hidden';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_hook_info().
 */
function form_shroud_hook_info() {
  $hooks['shroud_define'] = array();
}

/**
 * Implements hook_shroud_define().
 */
function form_shroud_shroud_define() {
  $shroud_elements['node_form']['default'] = array(
    'revision_information' => 'Revision information',
    'menu' => 'Menu settings',
    'path' => 'URL path settings',
    'comment_settings' => 'Comment settings',
    'author' => 'Authoring information',
    'options' => 'Publishing options',
  );
  $shroud_elements['node_form']['actions'] = array(
    'actions' => array(
      'delete' => 'Delete',
    ),
  );
  $shroud_elements['menu_overview_form']['default'] = array(
    'hidden' => 'Enabled',
    );
  $shroud_elements['menu_overview_form']['actions'] = array(
    'operations' => array(
      'edit' => 'Edit',
      'delete' => 'Delete',
    ),
  );
  $shroud_elements['menu_edit_menu']['actions'] = array(
    'actions' => array(
      'delete' => 'Delete',
    ),
  );
  return $shroud_elements;
}
